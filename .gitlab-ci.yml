image: python:3.9

stages:
  - check
  - test
  - build

variables:
  POSTGRES_DB: db
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  DOCKER_TLS_CERTDIR: "/certs"
  DATABASE_URL: "psql://user:password@postgres/db"

default:
  before_script:
    - export PATH=$PATH:.pip/bin/

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ".cache/pip"
  key: "$CI_PROJECT_DIR"

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres

bandit:
  stage: check
  script:
    - pip install --user bandit
    - bandit --exclude ./.pip --recursive ./

yapf:
  stage: check
  script:
    - pip install --user yapf
    - yapf --quiet --recursive .

django_test:
  services:
    - postgres:latest
  stage: test
  script:
    - python -V # Print out python version for debugging
    - pip install --user -r requirements.txt
    - python manage.py test

docker-build:
  image: docker:latest
  stage: build
  services:
  - docker:dind
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
  - docker push "$CI_REGISTRY_IMAGE${tag}"
